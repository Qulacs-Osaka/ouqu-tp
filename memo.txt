「サンプリングで期待値を求める」という動作、よく考えると,一回ずつサンプリングせずに、確率だけ求めて、二項分布で求めることが可能です。
しかし、ノイズなしで確率を厳密に求めるには、

samplingの計算量: O(2^qubit + qubit*shot)

二項分布の計算量

愚直サンプリング * ノイズなし　= 回路を実行後、samplingするの

愚直サンプリング * ノイズあり　= noisesimの計算量になる。

二項分布　* ノイズなし = 回路の後はO(2^qubit)で求まる。

二項分布　* ノイズあり = noisesimratorが使えないので密度行列になって、回路が重い 厳密解と同じぐらい時間がかかる。


サンプリング、よく考えると、　一回ずつサンプリングせずに、確率だけ求めて、二項分布で求めること　ができます。
ただし、この高速化をしなくても、　一回のサンプリング当たりの時間はO(1)程度です。(noiseありだとサンプリング回数が増えると時間がかかるが、それは確率を求めるパターンでも時間がかかるので同じです)

とりあえず二項分布はなしでいきます。shot数が多くて時間がかかるようであれば、高速化可能です


可視化に関する	kasika.pyはテスト用のやつで、一般開放されていません。
するなら、poetryのリストにqiskitとかmatplotlibとかを入れるので、容量が多くなります